Creating an Equivalent Numeric-Categories Dataset and Querying it the Same Way as the Text-Categories Dataset:  A Workable Solution
I created the numeric dataset, loaded it, and queried it.  It works.

Numeric Dataset

Script to Load Numeric Dataset
use dataverse TinySocial;
create type numericClassificationInfoType as open {
	classification: string,
	nodeID: int,
	category: {
		level_0: string,
		nested: {
			level_1: int,
			nested: {
				level_2: int,
				nested: {
					level_3: int,
					nested: {
						level_4: int,
						nested: {
							level_5: int,
							nested: {}
						}
					}
				}
			}
		}
	}
}

use dataverse TinySocial;
drop dataset NumericClassificationInfo if exists;
create external dataset NumericClassificationInfo(numericClassificationInfoType)
    using localfs
    (("path"="localhost:///home/j/Documents/Laboratory/DSE203/Data/spreadsheetJSONnumeric.json"),
    ("format"="json"));

Numeric Dataset Query
USE TinySocial;
SELECT nodeID, 
       (SELECT gp.cat.category.nested.level_1, 
               gp.cat.category.nested.nested.level_2, 
               gp.cat.category.nested.nested.nested.level_3, 
               gp.cat.category.nested.nested.nested.nested.level_4, 
               gp.cat.category.nested.nested.nested.nested.nested.level_5 
        FROM gp) AS categories
FROM NumericClassificationInfo c
GROUP BY c.nodeID AS nodeID
GROUP AS gp(c as cat);

Query Result
{
    nodeID: 1005,
    categories: [
        {
            level_1: 247,
            level_2: 223,
            level_3: 1582,
            level_4: 0,
            level_5: 0
        }
    ]
}
{

    nodeID: 1007,
    categories: [
        {
            level_1: 247,
            level_2: 223,
            level_3: 504,
            level_4: 3145,
            level_5: 0
        },
        {
            level_1: 919,
            level_2: 1793,
            level_3: 3146,
            level_4: 0,
            level_5: 0
        }
    ]
}
{
    nodeID: 1019,
    categories: [
        {
            level_1: 247,
            level_2: 223,
            level_3: 1883,
            level_4: 1582,
            level_5: 0
        }
    ]
}
     ⁞
6384 rows

Text Dataset Query
USE TinySocial;
SELECT nodeID, 
       (SELECT gp.cat.category.nested.level_1, 
               gp.cat.category.nested.nested.level_2, 
               gp.cat.category.nested.nested.nested.level_3, 
               gp.cat.category.nested.nested.nested.nested.level_4, 
               gp.cat.category.nested.nested.nested.nested.nested.level_5 
        FROM gp) AS categories
FROM ClassificationInfo c
GROUP BY c.nodeID AS nodeID
GROUP AS gp(c as cat);

Query Result
{
    nodeID: 1005,
    categories: [
        {
            level_1: "Arts & Photography",
            level_2: "Architecture",
            level_3: "General",
            level_4: "N/A",
            level_5: "N/A"
        }
    ]
}
{
    nodeID: 1007,
    categories: [
        {
            level_1: "Arts & Photography",
            level_2: "Architecture",
            level_3: "Buildings",
            level_4: "Residential",
            level_5: "N/A"
        },
        {
            level_1: "Crafts, Hobbies & Home",
            level_2: "Home Improvement & Design",
            level_3: "Residential Architecture",
            level_4: "N/A",
            level_5: "N/A"
        }
    ]
}
{
    nodeID: 1019,
    categories: [
        {
            level_1: "Arts & Photography",
            level_2: "Architecture",
            level_3: "Individual Architects & Firms",
            level_4: "General",
            level_5: "N/A"
        }
    ]
}
     ⁞
6384 rows

If We Want an AsterixDB "Virtual Table" for Integrated Schema, Here is How it Could Work
Reusable user-defined functions (UDFs) are similar in nature to views in relational databases.  (AsterixDB’s AQL UDFs are essentially views with parameters.) 

AQL User-Defined Function (UDF) for NUMERIC Categories
use dataverse TinySocial;
create function numeric_categories()
{
  for $n in dataset NumericClassificationInfo
  let $categories := 
    { 
      "level_1": $n.category.nested.level_1, 
      "level_2": $n.category.nested.nested.level_2, 
      "level_3": $n.category.nested.nested.nested.level_3, 
      "level_4": $n.category.nested.nested.nested.nested.level_4, 
      "level_5": $n.category.nested.nested.nested.nested.nested.level_5 
    }
  group by $node := $n.nodeID with $categories
  return
    {
      "nodeID": $node,
      "categories": $categories
    }
};

AQL Query Using UDF for NUMERIC Categories
use dataverse TinySocial;
for $nid in numeric_categories()
return $nid;

AQL UDF for TEXT Categories
use dataverse TinySocial;
create function text_categories()
{
  for $n in dataset ClassificationInfo
  let $categories := 
    { 
      "level_1": $n.category.nested.level_1, 
      "level_2": $n.category.nested.nested.level_2, 
      "level_3": $n.category.nested.nested.nested.level_3, 
      "level_4": $n.category.nested.nested.nested.nested.level_4, 
      "level_5": $n.category.nested.nested.nested.nested.nested.level_5 
    }
  group by $node := $n.nodeID with $categories
  return
    {
      "nodeID": $node,
      "categories": $categories
    }
};

AQL Query Using UDF for TEXT Categories
use dataverse TinySocial;
for $nid in text_categories()
return $nid;


https://asterix.ics.uci.edu/pub/AsterixDBOverview.pdf
One final DDL feature that should be mentioned is support for reusable user-defined functions (UDFs), which are similar in nature to views in relational databases.  (AsterixDB’s AQL UDFs are essentially views with parameters.)  As the definition of such a function requires an AQL function body, we will provide an example in Query 8 in Section 3 and will provide more information about UDFs once we have introduced the reader to the basics of AQL.
   ⁞

Query 8: Universal quantification and function definition

create function unemployed() 
{
     for $msu in dataset MugshotUsers
     where (every $e in $msu.employment
     satisfies not(is-null($e.end-date)))
     return 
     {
          "name" : $msu.name,
          "address" : $msu.address
     }
};

Query 9: Function use

for $un in unemployed()
where $un.address.zip = "98765"
return $un

Query 8 defines a function (similar to a view in SQL) that returns the name and address of unemployed users. It tests for unemployed users by seeing that all their employments have ended.   Query 9 then uses this function and selects all unemployed users in the ZIP code 98765. Such a function can be written by an experienced user (one with a taste for universal quantifiers) and then used by a novice user (one with more normal tastes).
